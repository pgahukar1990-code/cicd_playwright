name: Playwright Parameterized MultiBrowser Parallel with Allure Reporting

on:
  workflow_dispatch:
    inputs:
      test_target:
        description: "Test file or pattern (e.g. dropdown.spec.js, tests/auth/, -g 'title')"
        required: false
        default: ""

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, "Google Chrome"]   # ðŸ‘ˆ multiple browsers
        shard: ["1/3", "2/3", "3/3"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests with Allure
        run: |
          TARGET=""
          if [ -n "${{ github.event.inputs.test_target }}" ]; then
            if [[ "${{ github.event.inputs.test_target }}" == *.spec.* ]]; then
              TARGET="tests/${{ github.event.inputs.test_target }}"
            else
              TARGET="${{ github.event.inputs.test_target }}"
            fi
          fi

          npx playwright test $TARGET \
            --project="${{ matrix.project }}" \
            --shard=${{ matrix.shard }} \
            --reporter=line,allure-playwright

      - name: Upload Allure results
        if: always()
        run: |
          SAFE_PROJECT=$(echo "${{ matrix.project }}" | tr ' ' '_' )
          SAFE_SHARD=$(echo "${{ matrix.shard }}" | sed 's/\//-/g')
          ARTIFACT_NAME="allure-results-${SAFE_PROJECT}-${SAFE_SHARD}"

          echo "Uploading artifact: $ARTIFACT_NAME"

          mkdir -p upload-results
          cp -r allure-results/* upload-results/ || true

          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: upload-results

  merge-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./allure-results

      - name: Merge and generate Allure report
        run: |
          mkdir -p merged-results
          find ./allure-results -type d -exec cp -r {}/* merged-results/ \;
          npx allure generate merged-results --clean -o allure-report

      - name: Upload merged Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
          retention-days: 30
